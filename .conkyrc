## No output to X <yes/no>
out_to_x no

## Create own window to draw <yes/no>
own_window no

## Print everything to console?
out_to_console yes

## Use double buffering (reduces flicker, not needed for console output)
double_buffer no

## Set to yes if you want Conky to be forked in the 
background no

## Update interval in seconds
update_interval 5.0

## This is the number of times Conky will update before quitting.
## Set to zero to run forever.
total_run_times 0

## Shortens units to a single character (kiB->k,GiB->G, etc.). Default is off.
short_units yes

if_up_strictness address

## Add spaces to keep things from moving about?  This only affects certain objects.
## use_spacer should have an argument of left, right,or none
use_spacer left

## Force UTF8? note that UTF8 support required XFT
override_utf8_locale no

## number of cpu samples to average
## set to 1 to disable averaging
cpu_avg_samples 2
## Sensors examples
# Top Process: ${top name 1}
# Root: {fs_used /}/${fs_size /} /home ${fs_free 
# Load: ${loadavg 1} ${loadavg 2} ${loadavg 3} 
# Load: $loadavg
# Swap: ${swap}/${swapmax} (${swapperc}%)
# Processes: ${running_processes} / ${processes}
# CPU: $cpu% 
# HDD: $diskio_read :Read $diskio_write :Write
# Temp: Core0: ${exec sensors | awk '/Core 0/ {print 
# Freq: ${freq cpu0}Mhz
# Uptime: $uptime
# Kernel:$kernel on $machine
# Name: $nodename - $sysname
# Battery: ${battery_percent BAT0}%
# Ethernet status
# Ul: ${upspeed enp7s0} kb/s | \
# Dl: ${downspeed enp7s0} kb/s | \

# /home ${fs_free /home}

## Stuff after 'TEXT' will be formatted on screen
TEXT

# Free space on /home
${upspeed wlp4s0}-${downspeed wlp4s0}     \
${diskio_read}-${diskio_write}        \
# 内存消耗排行
[ ${top_mem name 1}${top_mem name 2}]                               \
${uptime}         \
${addrs wlp4s0}  |  \
p: ${processes}  |  \
# CPU stats
CPU: ${freq}MHz  ${cpu cpu0}%  ${acpitemp}°C  |  \
RAM: ${mem}  ${memperc}%  |  \
Battery:  ${battery_percent BAT1}%  ${battery_time BAT1} ! ${battery_percent BAT0}%  ${battery_time BAT0} |  \
${time %y.%m.%d} ${time %H:%M}
